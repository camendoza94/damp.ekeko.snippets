
automatic operator application:

	type-related ones
		possible operands: 
			types occurring in wanted matches
			DONE - (source-defined) types (type|source ekeko query launchen)
	
	
cases:

Singleton
	a) van AP: PrinterSingleton
	   naar JH: IconKit (kleinst, dus bij voorkeur) of Clipboard
	   
	   1: erase_comments op typedeclaration,
	   2: remove from tempalte op method print
	   3: use set matching on list of bodydeclarations of class
	   4: remove from template op protected int id;
	   5: remove from template op protected static int objectsSoFar=0;
	   6: replace body of constructor by wildcard
	   7: add directive type to name of typedeclaration
	   8: replace name of typedeclaration by wildcard
	   
	   ....
	   
	   generalize-type-references (could also do a generalize-implicit-type-references that does so for [1 + 2]@[(type ?integertype)], but seldomly needed as refactoring 
	   variant van refactoring: overal (subtype ?type) toevoegen  
	   
	   

	strategie voor generalizeType:
	
	- sla project-value-identifier voor node waarvan template gemaakt wordt op in template ADT
	zodanig dat  truukje 
	
	 (def m (first (first (damp.ekeko/ekeko [?m] (damp.ekeko.jdt.ast/ast :MethodDeclaration ?m)))))
  (def mid (project-value-identifier m))
  (def equivalenttom (corresponding-project-value mid))
	
	werkt om vanuit een template bindings uit oorsprong op te vragen
	----> template refactorings enablen
	
	
	public Object addSnippetCode(ASTNode node) {
		Object snippet = FN_SNIPPET_FROM_NODE.invoke(node);
		cljGroup = FN_ADD_SNIPPET_TO_SNIPPETGROUP.invoke(cljGroup, snippet);
		return snippet;
	}
	
	
	
	
	operatoren:
		- remove directive (degene die geen weerslag hebben op hun kinderen)
		  